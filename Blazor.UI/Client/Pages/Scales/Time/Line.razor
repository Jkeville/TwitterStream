@page "/scales/time/line"
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor
@using ChartJs.Blazor.Util


@inject HttpClient Http
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@using Blazor.UI.Shared
@using System.Text.Json
@using Blazor.UI.Client.Services;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.SignalR.Client;
@using TweetStream.Models.Models;
@using static Blazor.UI.Client.Services.SampleUtils


<Chart Config="_config" @ref="_chart"></Chart>

@code {

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    public TopTenTotalsModel Data = new TopTenTotalsModel();
    //public List<ChartDto> ExchangedData = new List<ChartDto>();
    [Inject]
    public ITweetHttpRepository Repo { get; set; }
    private const int InitalCount = 7;
    private LineConfig _config;
    private Chart _chart;


    public async Task CallChartEndpoint()
    {
        var result = await Http.GetAsync("chart");
        if (!result.IsSuccessStatusCode)
            Console.WriteLine("Something went wrong with the response");
    }

    protected async override void OnInitialized()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "ChartJs.Blazor Time Scale Chart"
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = true
                    },

                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "ll HH:mm"
                            },
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                    }
                }
            };

        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/twitterhub"))
           .Build();

        hubConnection.On<TopTenTotalsModel>("ReceiveMessage", (data) =>
           {
               AddData(data.TweetsPerSecond);

               Data = data;
               StateHasChanged();
           });

        await hubConnection.StartAsync();



        _config.Data.Labels.AddRange(GetNextDays(InitalCount).Select(d => d.ToString("o")));

        IDataset<int> dataset1 = new LineDataset<int>(RandomScalingFactor(InitalCount))
        {
            Label = "My first dataset",
                BackgroundColor = ColorUtil.FromDrawingColor(ChartColors.Yellow),
        BorderColor = ColorUtil.FromDrawingColor(ChartColors.Blue),
        Fill = FillingMode.Disabled
        };

        await CallChartEndpoint();


        _config.Data.Datasets.Add(dataset1);
      
    }

    public bool IsConnected =>
       hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    //private void RandomizeData()
    //{
    //    foreach (IDataset dataset in _config.Data.Datasets)
    //    {
    //        if (dataset is IDataset<TimePoint> pointDataset)
    //        {
    //            for (int i = 0; i < pointDataset.Count; i++)
    //            {
    //                pointDataset[i] = new TimePoint(pointDataset[i].Time, RandomScalingFactor());
    //            }
    //        }
    //        else if (dataset is IDataset<int> intDataset)
    //        {
    //            int count = intDataset.Count;
    //            intDataset.Clear();
    //            intDataset.AddRange(RandomScalingFactor(count));
    //        }
    //    }

    //    _chart.Update();
    //}

    private void AddDataset()
    {
        string color = ColorUtil.FromDrawingColor(ChartColors.Green);
        IDataset<int> dataset = new LineDataset<int>(RandomScalingFactor(1))
        {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = color,
            BorderColor = color,
            Fill = FillingMode.Disabled
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    public static IEnumerable<int> RandomScalingFactor(int count)
    {
        int[] factors = new int[count];
        lock (_rng)
        {
            for (int i = 0; i < count; i++)
            {
                factors[i] = RandomScalingFactorThreadUnsafe();
            }
        }

        return factors;
    }
    //private void RemoveDataset()
    //{
    //    IList<IDataset> datasets = _config.Data.Datasets;
    //    if (datasets.Count == 0)
    //        return;

    //    datasets.RemoveAt(datasets.Count - 1);
    //    _chart.Update();
    //}

    /*
     *
     *
    private void RemoveData()
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        IList<string> labels = _config.Data.Labels;
        if (labels.Count > 0)
            labels.RemoveAt(labels.Count - 1);

        foreach (IDataset dataset in _config.Data.Datasets)
        {
            if (dataset is IDataset<TimePoint> pointDataset &&
                pointDataset.Count > 0)
            {
                pointDataset.RemoveAt(pointDataset.Count - 1);
            }
            else if (dataset is IDataset<int> intDataset &&
                     intDataset.Count > 0)
            {
                intDataset.RemoveAt(intDataset.Count - 1);
            }
        }

        _chart.Update();
    }
     */

    private void AddData(double tweetsPerSecond)
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        DateTime now = DateTime.Now;
        _config.Data.Labels.Add(now.AddDays(_config.Data.Labels.Count).ToString("o"));

        foreach (IDataset dataset in _config.Data.Datasets)
        {
            if (dataset is IDataset<TimePoint> pointDataset)
            {
                pointDataset.Add(new TimePoint(now.AddSeconds(pointDataset.Count), tweetsPerSecond));
            }
            else if (dataset is IDataset<double> intDataset)
            {
                intDataset.Add(tweetsPerSecond);
            }
        }

        _chart.Update();
    }

}
