@page "/fetchdata"
@using TweetStream.Models.Models
@using Blazor.UI.Shared
@using System.Text.Json
@using Blazor.UI.Client.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

<PageTitle>Tweet Stream Results</PageTitle>

<div class="container-fluid">


    <h1>Tweet Stream Results</h1>

    <p>Tweet Stream Statistics and Top 10 Hashtags.</p>
   

    @if (totals == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {



        <section id="stats" class="counter">


            <div class="container">
                <h4>STREAM STATISTICS</h4>
                <div class="main_counter_area">

                    <div class="row">

                        <div class="col-4 main_counter_content text-center white-text wow fadeInUp">

                            <div class="single_counter p-y-2 m-t-1">
                                <span class="oi oi-calculator" aria-hidden="true"></span>
                                <h2 class="statistic-counter">@totals.TotalTweets.ToString("N0")</h2>
                                <span></span>
                                <p>Total Tweets</p>
                            </div>
                        </div>
                        <div class="col-4 main_counter_content text-center white-text wow fadeInUp">
                            <div class="single_counter p-y-2 m-t-1">
                                <span class="oi oi-bar-chart" aria-hidden="true"></span>
                                <h2 class="statistic-counter">@Math.Round(totals.TweetsPerSecond,1)</h2>
                                <p>Tweets/Second</p>
                            </div>
                        </div>
                        <div class="col-4 main_counter_content  text-center white-text wow fadeInUp">
                            <div class="single_counter @maxColorClass p-y-2 m-t-1">
                                <span class="oi oi-pie-chart" aria-hidden="true"></span>
                                <h2 class="statistic-counter">@Math.Round(maxTweetsPerSecond,1)</h2>
                                <p>Max Tweets/Second</p>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </section>

        <section id="stats" class="counter">

            <div class="container">
                <h4>TOP TEN HASHTAGS</h4>
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>Hashtag</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{

                            @foreach (var tag in totals.TopTenHashTags)
                            {
                                i++;
                                <tr>
                                    <td>@i</td>
                                    <td>@tag</td>

                                </tr>
                            }
                        }
                    </tbody>
                </table>

            </div>

        </section>
    }
    <button class="btn btn-primary" @onclick="RefreshData">Manual Refresh</button>
</div>


@code {
    private TopTenTotalsModel totals;
    private HubConnection? hubConnection;
    int i = 0;
    double maxTweetsPerSecond = 0;
    string maxColorClass = "gray";


    private void GetMaxSpeedColor(double maxTweets)
    {


        switch (maxTweets)
        {
            case < 10:
                maxColorClass = "speed-range1";
                break;
            case < 20:
                maxColorClass = "speed-range2";
                break;
            case < 30:
                maxColorClass = "speed-range3";
                break;
            case < 40:
                maxColorClass = "speed-range4";
                break;
            case < 50:
                maxColorClass = "speed-range5";
                break;
            case < 55:
                maxColorClass = "speed-range6";
                break;
            case < 60:
                maxColorClass = "speed-range7";
                break;
            case < 65:
                maxColorClass = "speed-range8";
                break;
            case < 70:
            default:
                maxColorClass = "speed-range9";
                break;


        }


    }



    protected override async Task OnInitializedAsync()
    {
        totals = await Http.GetFromJsonAsync<TopTenTotalsModel>("Report");

        hubConnection = new HubConnectionBuilder()
         .WithUrl(NavigationManager.ToAbsoluteUri("/twitterhub"))
         .Build();

        hubConnection.On<TopTenTotalsModel>("ReceiveMessage", (data) =>
           {
               i = 0;
               totals = data;

               if (totals.TweetsPerSecond > maxTweetsPerSecond)
               {
                   maxTweetsPerSecond = totals.TweetsPerSecond;
               }

               GetMaxSpeedColor(maxTweetsPerSecond);

               StateHasChanged();
           });

        await hubConnection.StartAsync();
        if (hubConnection.State == HubConnectionState.Connected)
            Console.WriteLine("connection started");

        await CallChartEndpoint();
    }

    protected async void RefreshData()
    {
        totals = await Http.GetFromJsonAsync<TopTenTotalsModel>("Report");

    }

    public bool IsConnected =>
       hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    public async Task CallChartEndpoint()
    {
        var result = await Http.GetAsync("api/chart");
        if (!result.IsSuccessStatusCode)
            Console.WriteLine("Something went wrong with the response");
    }

}
